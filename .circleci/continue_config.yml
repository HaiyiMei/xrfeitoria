version: 2.1

parameters:
  build-unreal-plugin:
    type: boolean
    default: true
  run-test:
    type: boolean
    default: true

jobs:
  test-self-host:
    machine: true
    resource_class: haiyimei/windows-machines
    steps:
      - run:
          name: "Check Runner Info"
          shell: powershell.exe
          command: echo "Hi I'm on Runners!"

  unreal-windows:
    machine: true
    resource_class: haiyimei/windows-machines
    parameters:
      build-unreal-plugin:
        type: boolean
        default: true
    steps:
      - checkout
      - run:
          name: "Build Plugins & Run Tests"
          shell: powershell.exe
          no_output_timeout: 60m
          environment:
            BUILD_UNREAL_PLUGIN: << parameters.build-unreal-plugin >>
            PYTHONIOENCODING: "utf-8"
          command: |
            conda activate xrfeitoria
            python -m pip install .
            if ($env:BUILD_UNREAL_PLUGIN -eq 1) {
              echo "#### Building Unreal Plugin ####"
              python -m xrfeitoria.utils.publish_plugins `
                -u "C:/Program Files/Epic Games/UE_5.1/Engine/Binaries/Win64/UnrealEditor-Cmd.exe" `
                -u "C:/Program Files/Epic Games/UE_5.2/Engine/Binaries/Win64/UnrealEditor-Cmd.exe" `
                -u "C:/Program Files/Epic Games/UE_5.3/Engine/Binaries/Win64/UnrealEditor-Cmd.exe"
              $env:XRFEITORIA__VERSION=$(python -c "import xrfeitoria; print(xrfeitoria.__version__)")
              $env:XRFEITORIA__DIST_ROOT="$PWD/src"
            }
            python -m tests.setup_ci -u "C:/Program Files/Epic Games/UE_5.1/Engine/Binaries/Win64/UnrealEditor-Cmd.exe"
            python -m tests.unreal.main
            python -m tests.setup_ci -u "C:/Program Files/Epic Games/UE_5.2/Engine/Binaries/Win64/UnrealEditor-Cmd.exe"
            python -m tests.unreal.main
            python -m tests.setup_ci -u "C:/Program Files/Epic Games/UE_5.3/Engine/Binaries/Win64/UnrealEditor-Cmd.exe"
            python -m tests.unreal.main
      - store_artifacts:
          path: src/dist/
          destination: Plugins
      - store_test_results:
          path: tests/unreal/unreal.log

  unreal-linux:
    parameters:
      image:
        type: string
        default: "ghcr.io/epicgames/unreal-engine:dev-5.3"
      build-unreal-plugin:
        type: boolean
        default: true
    docker:
      - image: << parameters.image >>
        auth:
          username: $GHCR_USERNAME
          password: $GHCR_TOKEN
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: Install Miniconda and Python 3.10
          command: |
            curl -sLo Miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
            bash Miniconda.sh -b -p $HOME/miniconda
            echo "source $HOME/miniconda/bin/activate" >> $BASH_ENV
            source $BASH_ENV
            conda install -y python=3.10
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: "Build Plugins & Run Tests"
          environment:
            BUILD_UNREAL_PLUGIN: << parameters.build-unreal-plugin >>
            PYTHONIOENCODING: "utf-8"
          command: |
            python -m pip install .
            if [ "$BUILD_UNREAL_PLUGIN" = "true" ]; then
              echo "#### Building Unreal Plugin ####"
              python -m xrfeitoria.utils.publish_plugins -u "/home/ue4/UnrealEngine/Engine/Binaries/Linux/UnrealEditor-Cmd"
              export XRFEITORIA__DIST_ROOT="/home/ue4/project/src"
              export XRFEITORIA__VERSION=`python -c "import xrfeitoria; print(xrfeitoria.__version__)"`
            fi
            ## Can't run tests on non-gpu machine
            # python -m tests.setup_ci -u "/home/ue4/UnrealEngine/Engine/Binaries/Linux/UnrealEditor-Cmd"
            # python -m tests.unreal.main
      - store_artifacts:
          path: src/dist/
          destination: Plugins
      - store_test_results:
          path: /home/ue4/project/tests/unreal/unreal.log

  blender:
    docker:
      - image: linuxserver/blender:3.6.5
    steps:
      - checkout
      - run:
          name: Install Essential Packages
          command: |
            apt-get update
            apt-get install -y git
      - run:
          name: Install Miniconda and Python 3.10
          command: |
            curl -sLo Miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
            bash Miniconda.sh -b -p $HOME/miniconda
            echo "source $HOME/miniconda/bin/activate" >> $BASH_ENV
            source $BASH_ENV
            conda install -y python=3.10
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: "Build Blender Addon & Run Tests"
          command: |
            python -m pip install .
            python -m xrfeitoria.utils.publish_plugins --blender
            python -m tests.setup_ci -b /usr/bin/blender
            python -m tests.blender.main
      - store_artifacts:
          path: /config/project/src/dist/
      - store_test_results:
          path: /config/project/output/tests/blender/blender.log

  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            # Download artifacts
            # Get jobs of the workflow
            jobs=$(curl --request GET \
              -H "Circle-Token: $CIRCLE_TOKEN" \
              --url https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job
            )
            curl -s -H "Circle-Token: $CIRCLE_TOKEN" https://circleci.com/api/v1.1/project/:vcs-type/:username/:project/:build_num/artifacts \
              | grep -o -E 'https://([^"]*)' \
              | wget --verbose --header "Circle-Token: $CIRCLE_TOKEN" --input-file -
            VERSION=$(my-binary --version)
            ghr -t ${GITHUB_TOKEN} -u :username -r :project -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/

workflows:
  unreal-workflow:
    jobs:
      - test-self-host
      # - unreal-windows:
      #     name: "Unreal - Windows UE"
      #     build-unreal-plugin: << pipeline.parameters.build-unreal-plugin >>
      #     requires:
      #       - test-self-host
      # - unreal-linux:
      #     name: "Unreal - Linux UE"
      #     build-unreal-plugin: << pipeline.parameters.build-unreal-plugin >>
      #     matrix:
      #       parameters:
      #         image: ["ghcr.io/epicgames/unreal-engine:dev-5.1", "ghcr.io/epicgames/unreal-engine:dev-5.2", "ghcr.io/epicgames/unreal-engine:dev-5.3"]
      - blender:
          name: "Blender"
      - publish-github-release:
          name: "Publish GitHub Release"
          # requires:
            # - unreal-windows
            # - unreal-linux
          # filters:
          #   tags:
          #     only: /^v\d+\.\d+\.\d+/
